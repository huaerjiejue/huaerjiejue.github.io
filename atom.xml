<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小阔的bug日常</title>
  
  <subtitle>bug改不完了</subtitle>
  <link href="https://huaerjiejue.github.io/atom.xml" rel="self"/>
  
  <link href="https://huaerjiejue.github.io/"/>
  <updated>2022-12-23T12:05:30.149Z</updated>
  <id>https://huaerjiejue.github.io/</id>
  
  <author>
    <name>小阔</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sql注入笔记1</title>
    <link href="https://huaerjiejue.github.io/2022/12/23/sql%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B01/"/>
    <id>https://huaerjiejue.github.io/2022/12/23/sql%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B01/</id>
    <published>2022-12-23T10:07:19.000Z</published>
    <updated>2022-12-23T12:05:30.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sql注入笔记1"><a href="#sql注入笔记1" class="headerlink" title="sql注入笔记1"></a>sql注入笔记1</h1><h2 id="单引号，双引号，括号引用的识别"><a href="#单引号，双引号，括号引用的识别" class="headerlink" title="单引号，双引号，括号引用的识别"></a>单引号，双引号，括号引用的识别</h2><span id="more"></span><p>最近学习渗透测试，从sql入手，做的实战是sqllabs，<br>表示，思路大概都能懂，但是每次都卡壳在对于变量的包装破解上（<br>姑且就让我这么叫把），每次都是脑袋痛，呜呜呜了。</p><p>首先，介绍一下，sql注入的基本原理，就是在输入框中输入一些特殊的字符，来达到sql语句的执行，从而达到攻击的目的。那在攻击的<br>过程中呢，就会遇到各种各样的问题，对于变量的包装就是其中一种<br>，一般来说，有一个变量id，正常情况下，id&#x3D;1，那我们渗透测试的时候，可以<br>输入id&#x3D;1’ or 1&#x3D;1#，这样就可以达到攻击的目的，但是，这样的话，就会遇到各种各样的问题，比如，<br>如果开发者对将光秃秃的id改成‘id’，那么我们就无法达到攻击的目的了。<br>而相应的对抗过程呢，我们写几个 ‘ （或者其他），就可以达到攻击的目的了。</p><p>但接下来问题又来了，我们怎么判断开发者在包装的过程中是添加的单引号，双引号，还是其他等等的呢？<br>其实，这个问题，一个一个测试就好了，就是怕测不出来。这里以最简单的测试举例子。</p><hr><h2 id="这里引用的是sqllabs-1的一个题目"><a href="#这里引用的是sqllabs-1的一个题目" class="headerlink" title="这里引用的是sqllabs-1的一个题目"></a>这里引用的是sqllabs-1的一个题目<br><img src="/img_1.png" alt="img_1.png"></h2><h2 id="首先，第一步，你得测吧，简单输个单引号，看看会不会报错。很好，报错了，这是为什么呢，我们可以想象一下，原来语句是这样的，’id‘，但是我们输入了一个单引号，变成了’id‘’，这样就会报错了，因为这个语句是不完整的。BUTTTT，我们只能证明有没有单引号，但是双引号呢？括号呢？我们还要继续测量。这里因为我比较懒，就不测了。"><a href="#首先，第一步，你得测吧，简单输个单引号，看看会不会报错。很好，报错了，这是为什么呢，我们可以想象一下，原来语句是这样的，’id‘，但是我们输入了一个单引号，变成了’id‘’，这样就会报错了，因为这个语句是不完整的。BUTTTT，我们只能证明有没有单引号，但是双引号呢？括号呢？我们还要继续测量。这里因为我比较懒，就不测了。" class="headerlink" title="首先，第一步，你得测吧，简单输个单引号，看看会不会报错。很好，报错了，这是为什么呢，我们可以想象一下，原来语句是这样的，’id‘，但是我们输入了一个单引号，变成了’id‘’，这样就会报错了，因为这个语句是不完整的。BUTTTT，我们只能证明有没有单引号，但是双引号呢？括号呢？我们还要继续测量。这里因为我比较懒，就不测了。"></a>首先，第一步，你得测吧，简单输个单引号，看看会不会报错。<br><img src="/img_2.png" alt="img_2.png"><br>很好，报错了，这是为什么呢，我们可以想象一下，原来语句是这样的，’id‘<br>，但是我们输入了一个单引号，变成了’id‘’，这样就会报错了，因为这个语句是不完整的。<br>BUTTTT，我们只能证明有没有单引号，但是双引号呢？括号呢？我们还要继续测量。<br>这里因为我比较懒，就不测了。</h2><h2 id="其次，我们可以测试了，根据上一步，猜测是单引号，我们总要验证自己猜测的对不对吧。输入？id-x3D-1’-or-1-x3D-1–-，看看会不会报错。成功，说明可以，补充一下，这里的–是注释，因为我们不需要后面的语句了，所以就注释掉了。or-1-x3D-1叫做万能语句，就是只要是sql语句不出问题，不用管变量的正确与否，都会返回true，这里就是返回了所有的数据。"><a href="#其次，我们可以测试了，根据上一步，猜测是单引号，我们总要验证自己猜测的对不对吧。输入？id-x3D-1’-or-1-x3D-1–-，看看会不会报错。成功，说明可以，补充一下，这里的–是注释，因为我们不需要后面的语句了，所以就注释掉了。or-1-x3D-1叫做万能语句，就是只要是sql语句不出问题，不用管变量的正确与否，都会返回true，这里就是返回了所有的数据。" class="headerlink" title="其次，我们可以测试了，根据上一步，猜测是单引号，我们总要验证自己猜测的对不对吧。输入？id&#x3D;1’ or 1&#x3D;1–+，看看会不会报错。成功，说明可以，补充一下，这里的–是注释，因为我们不需要后面的语句了，所以就注释掉了。or 1&#x3D;1叫做万能语句，就是只要是sql语句不出问题，不用管变量的正确与否，都会返回true，这里就是返回了所有的数据。"></a>其次，我们可以测试了，根据上一步，猜测是单引号，我们总要验证自己猜测的对不对吧。<br>输入？id&#x3D;1’ or 1&#x3D;1–+，看看会不会报错。<br><img src="/img_3.png" alt="img_3.png"><br>成功，说明可以，补充一下，这里的–是注释，因为我们不需要后面的语句了，所以就注释掉了。<br>or 1&#x3D;1叫做万能语句，就是只要是sql语句不出问题，不用管变量的正确与否<br>，都会返回true，这里就是返回了所有的数据。</h2><p>最后，我们就可以愉快地开始攻击了，咳咳，渗透，</p><p>最最后，想写一点自己的感想，这是sql注入的第一篇文章，也是我这个博客的第一篇文章，<br>说实话我不知道自己能坚持多久，因为我总是三分钟热度，哎，尽力吧。<br>by the way，我感觉，写博客的意义还挺多，一方面，可以记录一下，<br>方便日后感伤抒怀，哈哈，另一方面，在刚才码字的过程中，感觉自己更清楚了，<br>回想以前，好像确实是这样，总是在总结以为自己掌握的东西的时候，自己的能力<br>又进一步有了提高，而且，还可以抒发一下感情，真不粗。好了，今天的总结就到这里了，<br>接着练习去了。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;sql注入笔记1&quot;&gt;&lt;a href=&quot;#sql注入笔记1&quot; class=&quot;headerlink&quot; title=&quot;sql注入笔记1&quot;&gt;&lt;/a&gt;sql注入笔记1&lt;/h1&gt;&lt;h2 id=&quot;单引号，双引号，括号引用的识别&quot;&gt;&lt;a href=&quot;#单引号，双引号，括号引用的识别&quot; class=&quot;headerlink&quot; title=&quot;单引号，双引号，括号引用的识别&quot;&gt;&lt;/a&gt;单引号，双引号，括号引用的识别&lt;/h2&gt;</summary>
    
    
    
    
    <category term="单引号，双引号，括号" scheme="https://huaerjiejue.github.io/tags/%E5%8D%95%E5%BC%95%E5%8F%B7%EF%BC%8C%E5%8F%8C%E5%BC%95%E5%8F%B7%EF%BC%8C%E6%8B%AC%E5%8F%B7/"/>
    
  </entry>
  
</feed>
