<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小阔的bug日常</title>
  
  <subtitle>bug改不完了</subtitle>
  <link href="https://huaerjiejue.github.io/atom.xml" rel="self"/>
  
  <link href="https://huaerjiejue.github.io/"/>
  <updated>2022-12-31T12:51:28.038Z</updated>
  <id>https://huaerjiejue.github.io/</id>
  
  <author>
    <name>小阔</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>last_day_of_2022</title>
    <link href="https://huaerjiejue.github.io/2022/12/31/last-day-of-2022/"/>
    <id>https://huaerjiejue.github.io/2022/12/31/last-day-of-2022/</id>
    <published>2022-12-31T12:09:29.000Z</published>
    <updated>2022-12-31T12:51:28.038Z</updated>
    
    <content type="html"><![CDATA[<p>������2022�����һ���ˣ������𲩿�Ҳ�þ�ûд�ˣ�����дһЩ��<br>��ʵ��û��ʲôҪд�ģ�һ����ѧϰ����󲿷�û��ʲô���ѵģ�<br>���������Ҿ�������˸е��˰ɣ������ż���㡣</p><p>��Ϊ������ǣ��߿��ڽ��꣬��Ϊ���ҵ�ӡ���У��߿����Ƚ�ҪԶ�룬���û�дӶ���Ƶ��<br>ˢ�����һ���Ϊ����ȥ�꣬��ô˵�أ��߿�������û���漣������һ�������ʧ�ܣ�<br>����һ���µĳ��У��µĻ������µ��ˣ��µ���̬����ֻϣ��һ��Խ��Խ�ðɣ�<br>�����˴�ѧ��ѧУ��С��С��װ�����ҵ�˫�ţ���������Ҫ��ȥ����Ҫȥ������<br>��Χȴû���ˣ��������������͹µ�����ʱ�޿̶��ڹµ�����������<br>һ���ˣ�������˵������������Ҳ��Ϊϰ��һ�����ˣ�������û��<br>�������Լ���ֻ����Щ�꽥��Ҳϲ��һ�����ˣ�û��Լ����û����ɧ<br>��</p><p>��������̫�ң�����˵�����߰����ˡ������й���һ��ĺá�</p><p>��˵һ�ºõĵط��ɣ�������һ�������ĳ��У�ѧ�����Լ���Ҫѧϰ��<br>רҵ����ʶ��һ�Ѳ��������ѣ�û���˸߿�������Ҳ�������һ��룬<br>ѧϰ�Ļ������ȥ������⿪�ˣ�����������ƽ����</p><p>���õĵط�������ѧУ��������г�ѧУ�ͽ�ֹ�ﳵ�ˣ���������У�<br>������������ȥ���ˣ�����Ĺ���Ҳȥ���ˣ�����ս�����ڼ������������������<br>�������ڶԿ����Լ���˼������Ʈҡ���������µ�һЩĿ��Ҳ��û��<br>ʵ�֣�ϣ����һ�����Ŭ���ɡ�</p><p>����д������ɣ��ٱ����㣬��֪���ԡ�</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;������2022�����һ���ˣ������𲩿�Ҳ�þ�ûд�ˣ�����дһЩ��&lt;br&gt;��ʵ��û��ʲôҪд�ģ�һ����ѧϰ����󲿷�û��ʲô���ѵģ�&lt;br&gt;���������Ҿ�������˸е��˰ɣ������ż���㡣&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python学习笔记1</title>
    <link href="https://huaerjiejue.github.io/2022/12/25/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <id>https://huaerjiejue.github.io/2022/12/25/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</id>
    <published>2022-12-25T11:55:24.000Z</published>
    <updated>2022-12-25T13:55:27.723Z</updated>
    
    <content type="html"><![CDATA[<p>今天拿起久违的python，准备好好学习一下，好家伙，上来就被面向对象干蒙了，<br>我是谁，我在哪，好在经过一个下午的长时间按划水与摆烂，终于弄明白了，接下来就仔细写一下吧。</p><p>首先介绍下什么是面向对象，对于我来说其实就是一个大包，里面有属性，有方法，属性就是变量，方法就是函数，<br>它们放在一起，叫做类，举个简单的例子，就像是一个专门的柜子，上面存放着属性和方法，可以有很好的便捷性。<br>而且，这个类还有模板的功能，就是可以复制，复制出来的就是对象，对象就是类的实例，就像是柜子里面的东西，<br>每个对象都是这个柜子复刻出来的，但又不太一样。</p><p>而这些对象，有不同的访问权限，有的是公开的，有的是私有的，私有的一般在前面加上‘__’作为私有的标志，<br>这样的话就无法从外面访问到这个变量，只能在内部访问，这样就可以保证数据的安全性。（其实这个私有的对象为什么从外面访问不到，<br>原因是你加上双下划线后这和属性的名字就改变了，所以访问不到了，但是只要掌握命名的话，还是可以访问的，所以不是绝对的安全。）<br>但是太隐蔽了，所以一般程序员经常在命名前面加上一个下划线，表名这是不要碰的，但是你还是可以访问的，这样就可以保证数据的安全性。</p><p>那么就又有问题了，有些时候我们确实需要使这些属性或者方法变成私有的，那么怎么访问和修改呢？<br>聪明的程序员这时就会在这个类里面写一些访问器和修改器，用来从外面访问和修改这些属性和方法。</p><p>这里补充一个知识点，装饰器，一开始学习的资料上直接把装饰器和访问器修改器放到一起，我直接阵亡的好吧。其实完全可以把装饰器这个概念<br>分割开来，它和访问器修改器是两个完全不同的概念，装饰器根据名字就可以判断是用来修饰的，修饰什么呢？其实是修饰函数的，<br>它可以在不改变函数的情况下，给函数功能做一些完善和改正，非常的简单快捷，就是酱紫。</p><p>接下来说回面向对象，那么装饰器是怎么和面向对象扯上关系的呢？我们知道，我们通过访问器和修改器可以来操控私有的类属性，然后通过<br>装饰器来包装这些访问器和修改器，使得对属性的访问既安全又便捷。当然了，有一个修饰器，叫做property，<br>它把一个方法重新包装成一个属性，这样就可以用点运算符来访问和修改这个私有属性了。</p><p>总之，就是我们通过访问器和修改器来控制私有属性，然后通过property这个装饰器再将这个方法包装成属性，成功实现了从一个不可访问修改的属性<br>向另一个属性的移植过程，这样就可以用点运算符来访问和修改这个私有属性了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天拿起久违的python，准备好好学习一下，好家伙，上来就被面向对象干蒙了，&lt;br&gt;我是谁，我在哪，好在经过一个下午的长时间按划水与摆烂，终于弄明白了，接下来就仔细写一下吧。&lt;/p&gt;
&lt;p&gt;首先介绍下什么是面向对象，对于我来说其实就是一个大包，里面有属性，有方法，属性就是</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>sql注入笔记1</title>
    <link href="https://huaerjiejue.github.io/2022/12/23/sql%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B01/"/>
    <id>https://huaerjiejue.github.io/2022/12/23/sql%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B01/</id>
    <published>2022-12-23T10:07:19.000Z</published>
    <updated>2022-12-24T07:28:44.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sql注入笔记1"><a href="#sql注入笔记1" class="headerlink" title="sql注入笔记1"></a>sql注入笔记1</h1><h2 id="单引号，双引号，括号引用的识别"><a href="#单引号，双引号，括号引用的识别" class="headerlink" title="单引号，双引号，括号引用的识别"></a>单引号，双引号，括号引用的识别</h2><span id="more"></span><p>最近学习渗透测试，从sql入手，做的实战是sqllabs，<br>表示，思路大概都能懂，但是每次都卡壳在对于变量的包装破解上（<br>姑且就让我这么叫把），每次都是脑袋痛，呜呜呜了。</p><p>首先，介绍一下，sql注入的基本原理，就是在输入框中输入一些特殊的字符，来达到sql语句的执行，从而达到攻击的目的。那在攻击的<br>过程中呢，就会遇到各种各样的问题，对于变量的包装就是其中一种<br>，一般来说，有一个变量id，正常情况下，id&#x3D;1，那我们渗透测试的时候，可以<br>输入id&#x3D;1’ or 1&#x3D;1#，这样就可以达到攻击的目的，但是，这样的话，就会遇到各种各样的问题，比如，<br>如果开发者对将光秃秃的id改成‘id’，那么我们就无法达到攻击的目的了。<br>而相应的对抗过程呢，我们写几个 ‘ （或者其他），就可以达到攻击的目的了。</p><p>但接下来问题又来了，我们怎么判断开发者在包装的过程中是添加的单引号，双引号，还是其他等等的呢？<br>其实，这个问题，一个一个测试就好了，就是怕测不出来。这里以最简单的测试举例子。</p><p>这里引用的是sqllabs-1的一个题目<br><img src="/img_1.png" alt="img_1.png"></p><p>首先，第一步，你得测吧，简单输个单引号，看看会不会报错。<br><img src="/img_2.png" alt="img_2.png"><br>很好，报错了，这是为什么呢，我们可以想象一下，原来语句是这样的，’id‘<br>，但是我们输入了一个单引号，变成了’id‘’，这样就会报错了，因为这个语句是不完整的。<br>BUTTTT，我们只能证明有没有单引号，但是双引号呢？括号呢？我们还要继续测量。<br>这里因为我比较懒，就不测了。</p><p>其次，我们可以测试了，根据上一步，猜测是单引号，我们总要验证自己猜测的对不对吧。<br>输入？id&#x3D;1’ or 1&#x3D;1–+，看看会不会报错。<br><img src="/img_3.png" alt="img_3.png"><br>成功，说明可以，补充一下，这里的–是注释，因为我们不需要后面的语句了，所以就注释掉了。<br>or 1&#x3D;1叫做万能语句，就是只要是sql语句不出问题，不用管变量的正确与否<br>，都会返回true，这里就是返回了所有的数据。</p><p>最后，我们就可以愉快地开始<del>攻击</del>了，咳咳，渗透，</p><p>最最后，想写一点自己的感想，这是sql注入的第一篇文章，也是我这个博客的第一篇文章，<br>说实话我不知道自己能坚持多久，因为我总是三分钟热度，哎，尽力吧。<br>by the way，我感觉，写博客的意义还挺多，一方面，可以记录一下，<br>方便日后感伤抒怀，哈哈，另一方面，在刚才码字的过程中，感觉自己更清楚了，<br>回想以前，好像确实是这样，总是在总结以为自己掌握的东西的时候，自己的能力<br>又进一步有了提高，而且，还可以抒发一下感情，真不粗。好了，今天的总结就到这里了，<br>接着练习去了。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;sql注入笔记1&quot;&gt;&lt;a href=&quot;#sql注入笔记1&quot; class=&quot;headerlink&quot; title=&quot;sql注入笔记1&quot;&gt;&lt;/a&gt;sql注入笔记1&lt;/h1&gt;&lt;h2 id=&quot;单引号，双引号，括号引用的识别&quot;&gt;&lt;a href=&quot;#单引号，双引号，括号引用的识别&quot; class=&quot;headerlink&quot; title=&quot;单引号，双引号，括号引用的识别&quot;&gt;&lt;/a&gt;单引号，双引号，括号引用的识别&lt;/h2&gt;</summary>
    
    
    
    
    <category term="单引号，双引号，括号" scheme="https://huaerjiejue.github.io/tags/%E5%8D%95%E5%BC%95%E5%8F%B7%EF%BC%8C%E5%8F%8C%E5%BC%95%E5%8F%B7%EF%BC%8C%E6%8B%AC%E5%8F%B7/"/>
    
  </entry>
  
</feed>
