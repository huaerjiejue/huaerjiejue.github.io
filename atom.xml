<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小阔的bug日常</title>
  
  <subtitle>bug改不完了</subtitle>
  <link href="https://huaerjiejue.github.io/atom.xml" rel="self"/>
  
  <link href="https://huaerjiejue.github.io/"/>
  <updated>2023-01-12T09:18:25.499Z</updated>
  <id>https://huaerjiejue.github.io/</id>
  
  <author>
    <name>小阔</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sql注入之cookie注入</title>
    <link href="https://huaerjiejue.github.io/2023/01/07/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bcookie%E6%B3%A8%E5%85%A5/"/>
    <id>https://huaerjiejue.github.io/2023/01/07/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bcookie%E6%B3%A8%E5%85%A5/</id>
    <published>2023-01-07T13:04:39.000Z</published>
    <updated>2023-01-12T09:18:25.499Z</updated>
    
    <content type="html"><![CDATA[<p>昨天前天练习cookie注入，有一个问题一直困扰我，今天想了一下，忽然就眼前一亮，貌似大概想明白了，所以赶紧来写一下。</p><p>问题是什么呢，我在做sqllab21，22关的时候，发现了这样一个问题，每次我输入账号admin，密码输入1，当然这里密码是瞎填的，然后页面显示就是成功了，但是回显的信息上显示账号是admin，密码是另外一个东西1‘adn1&#x3D;2#这么一个东西，是我之前做渗透测试的时候写的一个payload了，当时就很迷惑，密码写的1，为什么出来这么一个东东。现在有点明白了，一切都是cookie搞的鬼</p><p>首先写一下自己了解的cookie，当我们与网站服务器相互链接的时候，第一次我们输入账号密码，第二次我们进入该网站就会发现不用继续输入账号密码了，没想到这么多年居然没有注意到这个东西，哎，真遗憾，接着说，之所以会有上面这个现象，是因为当我们第一次向服务此get或post信息的时候，服务器不仅返回我们页面的信息，还有一个cookie，下一次我们进入该网站的时候，我们浏览器就会向服务器发送一个cookie，浏览器<br>收到这个cookie就会知道我们的信息，这样，即使我们不输入相关的账号，密码我们也可以直接登录了，不然每一次登录网站就输入一遍账号密码，岂不是太麻烦了，正因为如此，sql注入的时候除了get，post，还有cookie，当然还有数据包的头部信息，因为这些都是向网站服务器发送信息，这些信息肯定都会与服务器进行交互，也就有了注入的可能。</p><p>好了，大致了解了cookie的原理，然后写一下上面那个问题的原因，原因是什么呢，其实很简单，其实第一次我输入账号密码的时候，服务器会返回一个cookie，这个cookie只包含一个信息，叫做uname，其实就是username的别称，而通过网站源代码可以得知，当服务器通过cookie查询时，他是这样的：</p><p>$sql&#x3D;”SELECT * FROM users WHERE username&#x3D;(‘$cookee’) LIMIT 0,1”;</p><p>就离谱，它指返回username，即只要有账号名称，就可以了，密码神马的它自动帮你查了，怎么说呢，就是，你给他一个名称，他返回给你一串信息，这里包括名称，密码，cookie，http头之类的，这也就是为什么我输入密码为1，他自动给我显示出真实密码的原因，因为他里面有一个isset函数，函数接受一个submit按钮，他的那个信息根本不是我登录返回的信息，他是根据我浏览器传输cookie的信息，因为那段信息的出现的前提条件就是我们有submit，这样一切都真相打败了，我的账号密码是错误的，从来没有通过账号密码登录成功过，这不过因为他的代码的机制，他仍然会返回给我一个cookie，这个cookie是正确的，然后当我刷新界面的时候，没有submit，浏览器上传了cookie，服务器通过上传的cookie，返回给我信息，其中就包括正确的账号名称和密码，并且，服务器也正是根据我的cookie来查询信息，而我也可以通过修改cookie来进行sql语句的注入，over。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;昨天前天练习cookie注入，有一个问题一直困扰我，今天想了一下，忽然就眼前一亮，貌似大概想明白了，所以赶紧来写一下。&lt;/p&gt;
&lt;p&gt;问题是什么呢，我在做sqllab21，22关的时候，发现了这样一个问题，每次我输入账号admin，密码输入1，当然这里密码是瞎填的，然后页面</summary>
      
    
    
    
    
    <category term="sql注入 网络安全 cookie" scheme="https://huaerjiejue.github.io/tags/sql%E6%B3%A8%E5%85%A5-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8-cookie/"/>
    
  </entry>
  
  <entry>
    <title>sql注入笔记2</title>
    <link href="https://huaerjiejue.github.io/2023/01/05/sql%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B02/"/>
    <id>https://huaerjiejue.github.io/2023/01/05/sql%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B02/</id>
    <published>2023-01-05T14:50:34.000Z</published>
    <updated>2023-01-05T15:15:00.523Z</updated>
    
    <content type="html"><![CDATA[<p>终于又有时间来练习sqllab了，今天打的是第21关，总算是走出来<br>基础关卡了，开心。</p><p>第21关是联系的cokkie和加密，通过对cookie进行加密来干扰，整体来说不算太难，<br>但是，but，我耗费了很长时间，为什么呢？有以下两点：</p><p>第一点，知道了原理，构造payload的时候出错了，通过闭合后写上了<br>and union select。。。。，这里就是纯纯的大问题，一般构造完之后<br>不用加and，看来还是基础查询语句不够熟悉。</p><p>第二点，这是费时最多的一个点，我带着admin（正确的账号）后面加<br>union select，but union select不是这么用的，在这里简单<br>说一下我的理解，首先，union。肯定前面也要有相同的语句对不对，<br>所以如果前面不是select，但用union select查询大概会出错，<br>其次，由于大部分情况下只有一个回显位，所以有时候前面的查询成功了，<br>我们后面的查询结果就会被覆盖，我们就没有办法看到了，这也是我的问题所在，<br>可以给前面一个错误的信息，后面的查询结果才会显示出来。</p><p>好了，sql此关就算过去了，不知不觉就11点了，对于我这种早睡的<br>人（相较于我认识的大部分人来说）实在是一种煎熬，本想早点睡<br>的，因为明天还要干活去，想了想，还是再写一写自己最近的一些感想吧，<br>毕竟这么多天没写了，属实惭愧，怎么说呢，内心五味杂陈，就是感觉<br>挺累的，不知道这样的生活还要维持多久，但又不确定自己是不是喜欢<br>这样的生活，不知道自己在干什么，不知道怎么干，可能这就是<br>一种迷茫吧，周围一篇雾蒙蒙，自己深陷其中，不想动，不敢动，<br>也没有能力能动，说实话，无数次，我都在想，如果我早早地离开了<br>人世，现在这段生活，这段心境，会不会令我后悔。</p><p>对了，通过这几天自己在github上瞎鼓捣，对docker理解更深层次了<br>一点，有时间也可以写一些，自己还弄了个hyper和alist，不得不说，<br>hyper的颜值属实比windows自带的命令行好看，真不错，不写了，睡觉<br>去了。困死了困死了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;终于又有时间来练习sqllab了，今天打的是第21关，总算是走出来&lt;br&gt;基础关卡了，开心。&lt;/p&gt;
&lt;p&gt;第21关是联系的cokkie和加密，通过对cookie进行加密来干扰，整体来说不算太难，&lt;br&gt;但是，but，我耗费了很长时间，为什么呢？有以下两点：&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>last_day_of_2022</title>
    <link href="https://huaerjiejue.github.io/2022/12/31/last-day-of-2022/"/>
    <id>https://huaerjiejue.github.io/2022/12/31/last-day-of-2022/</id>
    <published>2022-12-31T12:09:29.000Z</published>
    <updated>2022-12-31T12:54:29.294Z</updated>
    
    <content type="html"><![CDATA[<p>今天是2022年最后一天了，回想起博客也好久没写了，正好写一些，<br>其实本没有什么要写的，一方面学习方面大部分没有什么困难的，<br>哎，可能我就是这个伤感的人吧，总想着纪念点。</p><p>颇为意外的是，高考在今年，因为在我的印象中，高考都比较要远离，如果没有从短视频中<br>刷到，我还以为是在去年，怎么说呢，高考结束，没有奇迹发生，一如既往的失败，<br>来到一个新的城市，新的环境，新的人，新的心态，我只希望一切越来越好吧，<br>来到了大学，学校很小，小的装不下我的双脚，我总是想要出去，想要去看看，<br>周围却没有人，或许我们生来就孤单，无时无刻都在孤单，我们总是<br>一个人，不过话说回来，我现在也颇为习惯一个人了，倒不是没有<br>朋友陪自己，只是这些年渐渐也喜欢一个人了，没有约束，没有牢骚<br>。</p><p>哎，心绪太乱，反倒说的烂七八糟了。还是有构架一点的好。</p><p>先说一下好的地方吧，来到了一个不错的城市，学到了自己想要学习的<br>专业，认识了一堆不错的朋友，没有了高考。烦恼也算减轻了一大半，<br>学习的还算过的去，疫情解开了，健健康康，平安。</p><p>不好的地方，进入学校刚买的自行车学校就禁止骑车了，好无语，还有，<br>江泽民老先生去世了，家里的狗狗也去世了，俄乌战争还在继续，国内与国外两种<br>势力还在对抗，自己的思绪还是飘摇不定。定下的一些目标也是没有<br>实现，希望下一年继续努力吧。</p><p>哎，写到这里吧，临表涕零，不知所言。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天是2022年最后一天了，回想起博客也好久没写了，正好写一些，&lt;br&gt;其实本没有什么要写的，一方面学习方面大部分没有什么困难的，&lt;br&gt;哎，可能我就是这个伤感的人吧，总想着纪念点。&lt;/p&gt;
&lt;p&gt;颇为意外的是，高考在今年，因为在我的印象中，高考都比较要远离，如果没有从短视</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python学习笔记1</title>
    <link href="https://huaerjiejue.github.io/2022/12/25/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <id>https://huaerjiejue.github.io/2022/12/25/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</id>
    <published>2022-12-25T11:55:24.000Z</published>
    <updated>2022-12-25T13:55:27.723Z</updated>
    
    <content type="html"><![CDATA[<p>今天拿起久违的python，准备好好学习一下，好家伙，上来就被面向对象干蒙了，<br>我是谁，我在哪，好在经过一个下午的长时间按划水与摆烂，终于弄明白了，接下来就仔细写一下吧。</p><p>首先介绍下什么是面向对象，对于我来说其实就是一个大包，里面有属性，有方法，属性就是变量，方法就是函数，<br>它们放在一起，叫做类，举个简单的例子，就像是一个专门的柜子，上面存放着属性和方法，可以有很好的便捷性。<br>而且，这个类还有模板的功能，就是可以复制，复制出来的就是对象，对象就是类的实例，就像是柜子里面的东西，<br>每个对象都是这个柜子复刻出来的，但又不太一样。</p><p>而这些对象，有不同的访问权限，有的是公开的，有的是私有的，私有的一般在前面加上‘__’作为私有的标志，<br>这样的话就无法从外面访问到这个变量，只能在内部访问，这样就可以保证数据的安全性。（其实这个私有的对象为什么从外面访问不到，<br>原因是你加上双下划线后这和属性的名字就改变了，所以访问不到了，但是只要掌握命名的话，还是可以访问的，所以不是绝对的安全。）<br>但是太隐蔽了，所以一般程序员经常在命名前面加上一个下划线，表名这是不要碰的，但是你还是可以访问的，这样就可以保证数据的安全性。</p><p>那么就又有问题了，有些时候我们确实需要使这些属性或者方法变成私有的，那么怎么访问和修改呢？<br>聪明的程序员这时就会在这个类里面写一些访问器和修改器，用来从外面访问和修改这些属性和方法。</p><p>这里补充一个知识点，装饰器，一开始学习的资料上直接把装饰器和访问器修改器放到一起，我直接阵亡的好吧。其实完全可以把装饰器这个概念<br>分割开来，它和访问器修改器是两个完全不同的概念，装饰器根据名字就可以判断是用来修饰的，修饰什么呢？其实是修饰函数的，<br>它可以在不改变函数的情况下，给函数功能做一些完善和改正，非常的简单快捷，就是酱紫。</p><p>接下来说回面向对象，那么装饰器是怎么和面向对象扯上关系的呢？我们知道，我们通过访问器和修改器可以来操控私有的类属性，然后通过<br>装饰器来包装这些访问器和修改器，使得对属性的访问既安全又便捷。当然了，有一个修饰器，叫做property，<br>它把一个方法重新包装成一个属性，这样就可以用点运算符来访问和修改这个私有属性了。</p><p>总之，就是我们通过访问器和修改器来控制私有属性，然后通过property这个装饰器再将这个方法包装成属性，成功实现了从一个不可访问修改的属性<br>向另一个属性的移植过程，这样就可以用点运算符来访问和修改这个私有属性了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天拿起久违的python，准备好好学习一下，好家伙，上来就被面向对象干蒙了，&lt;br&gt;我是谁，我在哪，好在经过一个下午的长时间按划水与摆烂，终于弄明白了，接下来就仔细写一下吧。&lt;/p&gt;
&lt;p&gt;首先介绍下什么是面向对象，对于我来说其实就是一个大包，里面有属性，有方法，属性就是</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>sql注入笔记1</title>
    <link href="https://huaerjiejue.github.io/2022/12/23/sql%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B01/"/>
    <id>https://huaerjiejue.github.io/2022/12/23/sql%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B01/</id>
    <published>2022-12-23T10:07:19.000Z</published>
    <updated>2022-12-24T07:28:44.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sql注入笔记1"><a href="#sql注入笔记1" class="headerlink" title="sql注入笔记1"></a>sql注入笔记1</h1><h2 id="单引号，双引号，括号引用的识别"><a href="#单引号，双引号，括号引用的识别" class="headerlink" title="单引号，双引号，括号引用的识别"></a>单引号，双引号，括号引用的识别</h2><span id="more"></span><p>最近学习渗透测试，从sql入手，做的实战是sqllabs，<br>表示，思路大概都能懂，但是每次都卡壳在对于变量的包装破解上（<br>姑且就让我这么叫把），每次都是脑袋痛，呜呜呜了。</p><p>首先，介绍一下，sql注入的基本原理，就是在输入框中输入一些特殊的字符，来达到sql语句的执行，从而达到攻击的目的。那在攻击的<br>过程中呢，就会遇到各种各样的问题，对于变量的包装就是其中一种<br>，一般来说，有一个变量id，正常情况下，id&#x3D;1，那我们渗透测试的时候，可以<br>输入id&#x3D;1’ or 1&#x3D;1#，这样就可以达到攻击的目的，但是，这样的话，就会遇到各种各样的问题，比如，<br>如果开发者对将光秃秃的id改成‘id’，那么我们就无法达到攻击的目的了。<br>而相应的对抗过程呢，我们写几个 ‘ （或者其他），就可以达到攻击的目的了。</p><p>但接下来问题又来了，我们怎么判断开发者在包装的过程中是添加的单引号，双引号，还是其他等等的呢？<br>其实，这个问题，一个一个测试就好了，就是怕测不出来。这里以最简单的测试举例子。</p><p>这里引用的是sqllabs-1的一个题目<br><img src="/img_1.png" alt="img_1.png"></p><p>首先，第一步，你得测吧，简单输个单引号，看看会不会报错。<br><img src="/img_2.png" alt="img_2.png"><br>很好，报错了，这是为什么呢，我们可以想象一下，原来语句是这样的，’id‘<br>，但是我们输入了一个单引号，变成了’id‘’，这样就会报错了，因为这个语句是不完整的。<br>BUTTTT，我们只能证明有没有单引号，但是双引号呢？括号呢？我们还要继续测量。<br>这里因为我比较懒，就不测了。</p><p>其次，我们可以测试了，根据上一步，猜测是单引号，我们总要验证自己猜测的对不对吧。<br>输入？id&#x3D;1’ or 1&#x3D;1–+，看看会不会报错。<br><img src="/img_3.png" alt="img_3.png"><br>成功，说明可以，补充一下，这里的–是注释，因为我们不需要后面的语句了，所以就注释掉了。<br>or 1&#x3D;1叫做万能语句，就是只要是sql语句不出问题，不用管变量的正确与否<br>，都会返回true，这里就是返回了所有的数据。</p><p>最后，我们就可以愉快地开始<del>攻击</del>了，咳咳，渗透，</p><p>最最后，想写一点自己的感想，这是sql注入的第一篇文章，也是我这个博客的第一篇文章，<br>说实话我不知道自己能坚持多久，因为我总是三分钟热度，哎，尽力吧。<br>by the way，我感觉，写博客的意义还挺多，一方面，可以记录一下，<br>方便日后感伤抒怀，哈哈，另一方面，在刚才码字的过程中，感觉自己更清楚了，<br>回想以前，好像确实是这样，总是在总结以为自己掌握的东西的时候，自己的能力<br>又进一步有了提高，而且，还可以抒发一下感情，真不粗。好了，今天的总结就到这里了，<br>接着练习去了。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;sql注入笔记1&quot;&gt;&lt;a href=&quot;#sql注入笔记1&quot; class=&quot;headerlink&quot; title=&quot;sql注入笔记1&quot;&gt;&lt;/a&gt;sql注入笔记1&lt;/h1&gt;&lt;h2 id=&quot;单引号，双引号，括号引用的识别&quot;&gt;&lt;a href=&quot;#单引号，双引号，括号引用的识别&quot; class=&quot;headerlink&quot; title=&quot;单引号，双引号，括号引用的识别&quot;&gt;&lt;/a&gt;单引号，双引号，括号引用的识别&lt;/h2&gt;</summary>
    
    
    
    
    <category term="单引号，双引号，括号" scheme="https://huaerjiejue.github.io/tags/%E5%8D%95%E5%BC%95%E5%8F%B7%EF%BC%8C%E5%8F%8C%E5%BC%95%E5%8F%B7%EF%BC%8C%E6%8B%AC%E5%8F%B7/"/>
    
  </entry>
  
</feed>
